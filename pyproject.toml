[project]
name = "rra-population-model"
version = "0.0.1"
description = "Geospatial model of where people live."
license = "BSD-3-Clause"
readme = "README.md"
authors = [
    {name = "James Collins", email = "collijk@uw.edu"},
]
requires-python = ">=3.12"
dependencies = [
    "click",
    "geopandas>=1.0.1",
    "numpy>=2.2.1",
    "pandas>=2.2.3",
    "rasterra>=0.6.2",
    "shapely>=2.0.6",
    "pydantic>=2.10.4",
    "rra-tools>=1.0.25",
    "pyyaml>=6.0.2",
    "scikit-learn>=1.6.0",
    "pyarrow>=18.1.0",
    "torch>=2.5.1",
    "lightning>=2.5.0.post0",
    "scikit-image>=0.25.1",
    "pypdf2>=3.0.1",
    "contextily>=1.6.2",

]

[project.urls]
homepage = "https://ihmeuw.github.io/rra-population-model"
repository = "https://github.com/ihmeuw/rra-population-model"
documentation = "https://ihmeuw.github.io/rra-population-model"

[project.scripts]
pmrun = "rra_population_model.cli:pmrun"
pmtask = "rra_population_model.cli:pmtask"



[tool.poetry]
packages = [
    { include = "rra_population_model", from = "src" }
]
requires-poetry = ">=2.0"

[tool.poetry.dependencies]
python = ">=3.12, <3.13"

# We keep the dev dependencies here instead of in the project optional dependencies
# so they're still installed by default with `poetry install`.
# They won't be installed or shipped with the package.
[tool.poetry.group.dev.dependencies]
# Things we want to put a lower bound on
mypy = "^1.15.0"
mkdocs-material = "^9.6.0"
pre-commit = "^4.0.0"
pytest = "^8.3.0"
ruff = "^0.9.7"
# Things we don't care about the version
mkdocstrings = {extras = ["python"], version = "*"}
mkdocs-table-reader-plugin = "*"
mkdocs-gen-files = "*"
mkdocs-literate-nav = "*"
mkdocs-section-index = "*"
pymdown-extensions = "*"
pytest-github-actions-annotate-failures = "*"
pytest-cov = "*"
python-kacl = "*"
pandas-stubs = "*"
types-tqdm = "*"
types-pyyaml = "*"

[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py312" # The lowest supported version

[tool.ruff.lint]
# By default, enable all the lint rules.
# Add to the ignore list below if you don't want some rules.
# If you need some ignores for certain modules, see tool.ruff.lint.per-file-ignores below.
# For individual ignore cases, prefer inline `# noqa`s within the code.
select = ["ALL"]
ignore = [
    "COM812",   # flake8 missing trailing comma, fomatter handles
    "ISC001",   # Implicit string concatenation is not allowed
    "ANN",      # Type hints related, let mypy handle these.
    "D",        # Docstrings related, way too strict to our taste
    "T201",     # Use of `print` detected, we don't have formal logging yet.
    "PD901",    # Don't use generic 'df', practicality beats purity.
    "PD008",    # .at is okay
    "PD010",    # I like .unstack()
    "RET504",   # Assign to variable before return, useful for debugging
    "FBT001",   # Boolean type positional arg, annoying with cli flags
    "S603",     # Supbrocess arg validation, prone to false positives
    "FIX002",   # TODOs are okay.
    "TD002",    # TODOs don't need an author
    "TD003",    # TODOs don't need a linked issue
    "PYI041",   # float | int is better explicit typing than depending on a special case
    "RUF007",   # zip is idiomatic, this check is dumb.
    "RET505",   # Else after return, too many false positives.
    "E501",     # Line too long, handled by ruff format
    "TC001",    # Type-checking internal modules.
    "TC002",    # Type-checking on 3rd party packages.
    "PLR0913",  # We have a long of function args a lot, and making better datastru
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101",     # "Use of `assert` detected"
    "ARG",      # "Unused function argument". Fixtures are often unused.
    "S105",     # "Possible hardcoded password".
]
"scripts/**" = [
    "INP001",   # "Scripts are not part of a package."
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.pytest.ini_options]
addopts = """\
    --cov rra_population_model \
    --cov tests \
    --cov-report term-missing \
    --no-cov-on-fail \
"""

[tool.coverage.report]
fail_under = 100
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover'
]

[tool.mypy]
# This is the global mypy configuration.
# Avoid changing this!
strict = true  # See all the enabled flags `mypy --help | grep -A 10 'Strict mode'`
disallow_any_unimported = false
exclude = [
    "notebooks",
]

# If you need to ignore something for some specific module,
# add overrides for them. Avoid changing the global config!
# For example:
[[tool.mypy.overrides]]
module = [
    "geopandas.*",
    "shapely.*",
    "seaborn.*",
    "mpl_toolkits.*",
    "rasterio.*",
    "affine.*",
    "scipy.*",
    "sklearn.*",
    "contextily.*",
    "xarray.*",
]
ignore_missing_imports = true
